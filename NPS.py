# -*- coding: utf-8 -*-
"""Assignment 4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VuWKNAFJGyz2AvczmfcYQbQ17fo6kaCm

#Aplicação com Pandas em análise de NPS

# Etapa 1 - Organizando os dados
"""

#importando as bibliotecas
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

#carregando o dataset
from google.colab import files
uploaded = files.upload()

df = pd.read_csv('Assignment_base de dados - Sheet1.csv')
df.head()

#verificando os tipos de variáveis
df.dtypes

#convertendo para objeto os valores de ID_Pedido
df['ID_Pedido']= df['ID_Pedido'].astype('object')
df.dtypes

df.describe()

#Verificando a quantidade de null
mask1 = pd.isnull(df['NPS'])
df[mask1]

mask2 =pd.isnull(df['ID_Pedido'])
df[mask2]

mask3=pd.isnull(df['Plano fechado'])
df[mask3]

#removendo os valores nulos
df_2 =df.dropna()
df_2

#conferindo se todos os nulls foram removidos
df_2.isnull().sum()

df_2.set_index('ID_Pedido', inplace=True)
df_2

"""# 1.1 Basic"""

#Filtrando apenas os planos "Basic"
Basic = df_2[df_2['Plano fechado']=='Basic']
Basic

Basic_describe = Basic.describe()
Basic_describe

#filtrando apenas NPS 1-6
Basic_Red = Basic.query('6>= NPS >=1')
Basic_Red

print(Basic_Red.value_counts(),'\n',len(Basic_Red))

#porcentagem de valores Basic com NPS entre 1-6
Basic_Red_porc = len(Basic_Red)/len(Basic)
Basic_Red_porc

#filtrando NPS 7-8
Basic_Yellow = Basic.query('8>= NPS >=7')
Basic_Yellow

print(Basic_Yellow.value_counts(),'\n',len(Basic_Yellow))

#porcentagem de valores Basic com NPS entre 7-8
Basic_Yellow_porc = len(Basic_Yellow)/len(Basic)
Basic_Yellow_porc

#filtrando NPS 9-10
Basic_Green = Basic.query('10>= NPS >=9')
Basic_Green

print(Basic_Green.value_counts(),'\n',len(Basic_Green))

#porcentagem de valores Basic com NPS entre 9-10
Basic_Green_porc = len(Basic_Green)/len(Basic)
Basic_Green_porc

"""#1.2 Enterprise"""

#Filtrando apenas os planos Enterprise
Enterprise = df_2[df_2['Plano fechado']=="Enteprise"]
Enterprise

Enterprise_describe = Enterprise.describe()
Enterprise_describe

#filtrando apenas NPS 1-6
Enterprise_Red = Enterprise.query('6>= NPS >=1')
Enterprise_Red

print(Enterprise_Red.value_counts(),'\n',len(Enterprise_Red))

#porcentagem de valores Enterprise com NPS entre 1-6
Enterprise_Red_porc = len(Enterprise_Red)/len(Enterprise)
Enterprise_Red_porc

#filtrando apenas NPS 7-8
Enterprise_Yellow = Enterprise.query('8>= NPS >=7')
Enterprise_Yellow

print(Enterprise_Yellow.value_counts(),'\n',len(Enterprise_Yellow))

#porcentagem de valores Enterprise com NPS entre 7-8
Enterprise_Yellow_porc = len(Enterprise_Yellow)/len(Enterprise)
Enterprise_Yellow_porc

#filtrando apenas NPS 9-10
Enterprise_Green = Enterprise.query('10>= NPS >=9')
Enterprise_Green

print(Enterprise_Green.value_counts(),'\n',len(Enterprise_Green))

#porcentagem de valores Enterprise com NPS entre 9-10
Enterprise_Green_porc = len(Enterprise_Green)/len(Enterprise)
Enterprise_Green_porc

"""#1.3 Premium"""

#filtrando apenas os planos Premium 
Premium = df_2[df_2['Plano fechado']=="Premium"]
Premium

Premium_describe = Premium.describe()
Premium_describe

#filtrando apenas NPS 1-6
Premium_Red = Premium.query('6>= NPS >=1')
Premium_Red

print(Premium_Red.value_counts(),'\n',len(Premium_Red))

#porcentagem de valores Premium com NPS entre 1-6
Premium_Red_porc = len(Premium_Red)/len(Premium)
Premium_Red_porc

#filtrando apenas NPS 7-8
Premium_Yellow = Premium.query('8>= NPS >=7')
Premium_Yellow

print(Premium_Yellow.value_counts(),'\n',len(Premium_Yellow))

#porcentagem de valores Premium com NPS entre 1-6
Premium_Yellow_porc = len(Premium_Yellow)/len(Premium)
Premium_Yellow_porc

#filtrando apenas NPS 9-10
Premium_Green = Premium.query('10>= NPS >=9')
Premium_Green

print(Premium_Green.value_counts(),'\n',len(Premium_Green))

#porcentagem de valores Premium com NPS entre 1-6
Premium_Green_porc = len(Premium_Green)/len(Premium)
Premium_Green_porc

"""# Etapa 2 - Investigando e visualizando os dados"""

#plotando a relação entre Plano fechado x NPS
import seaborn as sns 
import plotly.express as px

px.box(df, x='Plano fechado', y='NPS')

labels = '1-6', '7-8', '9-10'
sizes=[Basic_Red_porc, Basic_Yellow_porc, Basic_Green_porc]
explode=(0,0,0.1)

fig1,ax1=plt.subplots()
ax1.pie(sizes,explode=explode, labels=labels, shadow= True, autopct='%1.1f%%',colors=['r', 'y','g'])
ax1.axis('equal')
plt.title('NPS para a categoria BASIC')
plt.show()

labels = '1-6', '7-8', '9-10'
sizes=[Enterprise_Red_porc, Enterprise_Yellow_porc, Enterprise_Green_porc]
explode=(0,0,0.1)

fig1,ax1=plt.subplots()
ax1.pie(sizes,explode=explode, labels=labels, shadow= True, autopct='%1.1f%%',colors=['r', 'y','g'])
ax1.axis('equal')
plt.title('NPS para a categoria ENTERPRISE')
plt.show()

labels = '1-6', '7-8', '9-10'
sizes=[Premium_Red_porc, Premium_Yellow_porc, Premium_Green_porc]
explode=(0,0,0.1)

fig1,ax1=plt.subplots()
ax1.pie(sizes,explode=explode, labels=labels, shadow= True, autopct='%1.1f%%', colors=['r', 'y','g'])
ax1.axis('equal')
plt.title('NPS para a categoria PREMIUM')
plt.show()

"""#Conclusão

De acordo com os dados levantados, o serviço Basic apresenta a maior porcentagem de NPS promotor (notas 9 e 10) quando comparado com os serviços Enterprise e Premium. 

Observa-se ainda , que o serviço Premium apresenta a maior porcentagem detratora (notas 1 a 6) quando comparado com os outros serviços

Ao supor uma diferença de preço considerável entre os serviços Basic, Enterprise e Premium, a empresa deveria focar nos serviços menos caros, uma vez que tem agradado mais a sua clientela.
"""